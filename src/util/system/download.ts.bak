// public static async pauseDownload(): Promise<void> {
//     return await invoke('pause_download');
// }

// public static async downloadFiles(repoId: string | null, modsetId: string | null, files: string[]): Promise<void> {
//     const repoStore = useRepoStore();
//     const settingsStore = useSettingsStore();
//     const repo = repoStore.getRepo(repoId);
//     if (repo === undefined) throw new Error(`Repository with id ${repoId} not found`);
//     return await invoke('download', {
//         repoType: repo.type?.toUpperCase(),
//         url: repo.download_server?.url,
//         targetPath: `${settingsStore.settings.downloadDirectoryPath}${System.SEPERATOR}`,
//         fileArray: files,
//     });
// }

// await listen('download_report', (data: { payload: number }) => {
//     if (downloadStore.current !== null) {
//         downloadStore.current.received += data.payload;
//         downloadStore.speeds.push(data.payload);
//     }
// });
// await listen('download_finished', (data: { payload: string }) => {
//     if (downloadStore.current !== null) {
//         const cacheData = hashStore.cache.get(downloadStore.current.item.id);
//         if (cacheData !== undefined) {
//             cacheData.missingFiles = cacheData.missingFiles.filter((path) => path !== data.payload);
//             cacheData.outdatedFiles = cacheData.outdatedFiles.filter((path) => path !== data.payload);
//             hashStore.cache.set(downloadStore.current.item.id, cacheData);
//         }
//     }
// });
